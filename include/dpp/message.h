#pragma once

#include <dpp/discord.h>
#include <optional>
#include <dpp/json_fwd.hpp>

namespace dpp {

struct embed_footer {
	std::string text;
	std::string icon_url;
	std::string proxy_url;
};

struct embed_image {
	std::string url;
	std::string proxy_url;
	std::string height;
	std::string width;
};

struct embed_thumbnail : public embed_image {
};

struct embed_video : public embed_image {
};

struct embed_provider {
	std::string name;
	std::string url;
};

struct embed_author {
	std::string name;
	std::string url;
	std::string icon_url;
	std::string proxy_icon_url;
};

struct embed_field {
	std::string name;
	std::string value;
	std::string is_inline;
};

struct embed {
	std::string			title;			/* Optional: title of embed */
	std::string			type;			/* Optional: type of embed (always "rich" for webhook embeds) */
	std::string			description;		/* Optional: description of embed */
	std::string			url;			/* Optional: url of embed */
	time_t				timestamp;		/* Optional: timestamp of embed content */
	uint32_t			color;			/* Optional: color code of the embed */
	std::optional<embed_footer>	footer;			/* Optional: footer information */
	std::optional<embed_image>	image;			/* Optional: image information */
	std::optional<embed_image>	thumbnail;		/* Optional: thumbnail information */
	std::optional<embed_image>	video;			/* Optional: video information */
	std::optional<embed_provider>	provider;		/* Optional: provider information */
	std::optional<embed_author>	author;			/* Optional: author information */
	std::vector<embed_field>	fields;			/* Optional: fields information */

	embed();
	embed(nlohmann::json* j);
	~embed();

	embed& set_title(const std::string &text);
	embed& set_description(const std::string &text);
	embed& set_color(uint32_t col);
	embed& set_url(const std::string &url);
	embed& add_field(const std::string& name, const std::string &value, bool is_inline);
	embed& set_author(const std::string& name, const std::string& url, const std::string& icon_url);
	embed& set_provider(const std::string& name, const std::string& url);
	embed& set_image(const std::string& url);
	embed& set_video(const std::string& url);
	embed& set_thumbnail(const std::string& url);
};

struct reaction {
	uint32_t count;
	bool me;
	snowflake emoji_id;
};

struct message {
	snowflake       id;				/* id of the message */
	snowflake       channel_id;			/* id of the channel the message was sent in */
	snowflake       guild_id;			/* Optional: id of the guild the message was sent in */
	user*		author;				/* the author of this message (not guaranteed to be a valid user, see below) */
	guild_member*	member;				/* Optional: member properties for this message's author */
	std::string	content;			/* contents of the message */
	time_t		sent;				/* when this message was sent */
	time_t		edited;				/* when this message was edited (or null if never) (may be empty) */
	bool		tts;				/* whether this was a TTS message */
	bool   		mention_everyone;		/* whether this message mentions everyone */
	user*		mentions;			/* users specifically mentioned in the message */
	role*		mention_roles;			/* roles specifically mentioned in this message */
	std::vector<snowflake> mention_channels;	/* Optional: channels specifically mentioned in this message */
	std::vector<const unsigned char*> attachments;	/* any attached files */
	std::vector<embed> embeds;			/* any embedded content */
	std::vector<reaction> reactions;		/* Optional: reactions to the message */
	std::string	nonce;				/* Optional: used for validating a message was sent */
	bool		pinned;				/* whether this message is pinned */
	snowflake	webhook_id;			/* Optional: if the message is generated by */

	message&	fill_from_json(nlohmann::json* j);
	std::string	build_json(bool with_id = false) const;

};

};

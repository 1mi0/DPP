name: D++ CI
on:
  push:
    paths-ignore:
      - 'docs/**'
      - 'docpages/**'
  pull_request:
    paths-ignore:
      - 'docs/**'
      - 'docpages/**'


jobs:
  linux-x64:
    name: Linux x64 (${{matrix.cfg.cpp-version}})
    runs-on: ${{matrix.cfg.os}}
    strategy:
      fail-fast: false # Don't fail everything if one fails. We want to test each OS/Compiler individually
      matrix:
        cfg:
          - { os: ubuntu-20.04, cpp-version: g++-8 }
          - { os: ubuntu-20.04, cpp-version: g++-9 }

    steps:
      - name: Checkout D++
        uses: actions/checkout@v2

      - name: Install apt packages
        run: sudo apt update && sudo apt install ${{ matrix.cfg.cpp-version }} ninja-build libsodium-dev libopus-dev zlib1g-dev

      - name: Generate CMake
        run: mkdir build && cd build && cmake -G Ninja ..
        env:
          CXX: ${{matrix.cfg.cpp-version}}

      - name: Build Project
        run: cd build && ninja

      - name: Package distributable
        if: ${{ matrix.cfg.cpp-version == 'g++-8' }}
        run: cd build && cpack

      - name: Upload Binary
        if: ${{ matrix.cfg.cpp-version == 'g++-8' }}
        uses: actions/upload-artifact@v2
        with:
          name: "libdpp - Debian Package ${{matrix.cfg.name}}"
          path: '${{github.workspace}}/build/*.deb'

on: [push, pull_request]

jobs:
  build_job:
    # The host should always be linux
    runs-on: ubuntu-18.04
    name: Build on ${{ matrix.distro }} ${{ matrix.arch }}

    # Run steps on a matrix of 3 arch/distro combinations
    strategy:
      matrix:
        include:
          - arch: arm64
            distro: ubuntu-20.04
          - arch: armhf
            distro: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2.1.0
      - uses: uraimo/run-on-arch-action@v2.0.5
        name: Build artifact
        id: build
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}

          # Create an artifacts directory
          setup: |
            mkdir -p "${PWD}/artifacts"

          # Mount the artifacts directory as /artifacts in the container
          dockerRunArgs: |
            --volume "${PWD}/artifacts:/artifacts"

          # Pass some environment variables to the container
          env: | # YAML, but pipe character is necessary
            artifact_name: git-${{ matrix.distro }}_${{ matrix.arch }}

          # The shell to run commands with in the container
          shell: /bin/sh

          install: |
                apt-get update -q -y
                apt-get install -q -y git g++-8 ninja-build libsodium-dev libopus-dev zlib1g-dev

          # Produce a binary artifact and place it in the mounted volume
          run: |
            mkdir build && cd build && cmake -G Ninja ..
            cd build && ninja && cpack
            cp *.deb "/artifacts/${artifact_name}"

      - name: Upload Binary
        uses: actions/upload-artifact@v2
        with:
          name: "libdpp - Debian ${{ matrix.arch }} Package"
          path: '${PWD}/artifacts/*.deb'

  macos:
    name: macOS x64
    runs-on: macos-latest
    steps:
      - name: Checkout D++
        uses: actions/checkout@v2

      - name: Install homebrew packages
        run: brew install cmake ninja libsodium opus

      - name: Generate CMake
        run: mkdir build && cd build && cmake -DCMAKE_BUILD_TYPE=Release -G Ninja ..

      - name: Build Project
        run: cd build && ninja

  windows: # Windows x64 and x86 build matrix
    strategy:
      fail-fast: false # Don't cancel other matrix jobs if one fails
      matrix:
        cfg:
        - { name: x64,  arch: x64 }

    name: "Windows ${{matrix.cfg.name}}"
    runs-on: windows-2019
    steps:
      - name: Checkout D++
        uses: actions/checkout@v2
        with:
          path: main

      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Install chocolatey packages (x64)
        run: choco install ninja -y

      - name: Generate CMake
        run: mkdir main/build && cd main/build && cmake -G "Visual Studio 16 2019" ..

      - name: Build Project
        run: cmake --build main/build --target dpp --config Release

      - name: Package distributable
        run: cd main/build && cpack

      - name: Upload Binary
        uses: actions/upload-artifact@v2
        with:
          name: "libdpp - Windows ${{matrix.cfg.name}}"
          path: '${{github.workspace}}/main/build/*.zip'



name: D++ CI
on: [push, pull_request]

jobs:
  linux-x64:
    name: Linux x64 (${{matrix.cfg.cpp-version}})
    runs-on: ${{matrix.cfg.os}}
    strategy:
      fail-fast: false # Don't fail everything if one fails. We want to test each OS/Compiler individually
      matrix:
        cfg:
          - { os: ubuntu-20.04, cpp-version: g++-8 }
          - { os: ubuntu-20.04, cpp-version: g++-9 }

    steps:
      - name: Checkout D++
        uses: actions/checkout@v2

      - name: Install apt packages
        run: sudo apt update && sudo apt install ${{ matrix.cfg.cpp-version }} ninja-build libsodium-dev libopus-dev zlib1g-dev

      - name: Generate CMake
        run: mkdir build && cd build && cmake -G Ninja ..
        env:
          CXX: ${{matrix.cfg.cpp-version}}

      - name: Build Project
        run: cd build && ninja

      - name: Package distributable
        if: ${{ matrix.cfg.cpp-version == 'g++-8' }}
        run: cd build && cpack

      - name: Upload Binary
        if: ${{ matrix.cfg.cpp-version == 'g++-8' }}
        uses: actions/upload-artifact@v2
        with:
          name: "libdpp - Debian Package ${{matrix.cfg.name}}"
          path: '${{github.workspace}}/build/*.deb'

  macos:
    name: macOS x64
    runs-on: macos-latest
    steps:
      - name: Checkout D++
        uses: actions/checkout@v2

      - name: Install homebrew packages
        run: brew install cmake ninja libsodium opus

      - name: Generate CMake
        run: mkdir build && cd build && cmake -DCMAKE_BUILD_TYPE=Release -G Ninja ..

      - name: Build Project
        run: cd build && ninja

  windows: # Windows x64 and x86 build matrix
    strategy:
      fail-fast: false # Don't cancel other matrix jobs if one fails
      matrix:
        cfg:
        - { name: x64,  arch: x64 }

    name: "Windows ${{matrix.cfg.name}}"
    runs-on: windows-2019
    steps:
      - name: Checkout D++
        uses: actions/checkout@v2
        with:
          path: main

      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Install chocolatey packages (x64)
        run: choco install ninja -y

      - name: Generate CMake
        run: mkdir main/build && cd main/build && cmake -G "Visual Studio 16 2019" ..

      - name: Build Project
        run: cmake --build main/build --target dpp --config Release

      - name: Package distributable
        run: cd main/build && cpack

      - name: Upload Binary
        uses: actions/upload-artifact@v2
        with:
          name: "libdpp - Windows ${{matrix.cfg.name}}"
          path: '${{github.workspace}}/main/build/*.zip'

  arm64:
    strategy:
      fail-fast: false
      matrix:
        cfg:
        - {name: "64"}

    name: "ARM${{matrix.cfg.name}}"
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout D++
        uses: actions/checkout@v2

      - name: Setup ARM64
        run: printf "deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ focal main multiverse restricted universe\ndeb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ focal main multiverse restricted universe\ndeb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ focal-updates main multiverse restricted universe\ndeb [arch=amd64] http://archive.ubuntu.com/ubuntu/ focal-updates main multiverse restricted universe\ndeb [arch=amd64] http://security.ubuntu.com/ubuntu/ focal-security main multiverse restricted universe" > a && sudo mv a /etc/apt/sources.list && sudo dpkg --add-architecture arm64 && sudo apt update

      - name: Install Packages
        run: sudo apt-get install -y zlib1g-dev:arm64 libssl-dev:arm64 g++-9-aarch64-linux-gnu gcc-9-aarch64-linux-gnu ninja-build libopus-dev:arm64 libsodium-dev:arm64 

      - name: Prepare System for CMake
        run: export PATH=$PATH:/usr/include:/usr/lib/aarch64-linux-gnu/:/usr/bin && sudo mv /usr/include/x86_64-linux-gnu/openssl/opensslconf.h /usr/include/openssl/ && sudo rm /usr/lib/x86_64-linux-gnu/libssl.so /usr/lib/x86_64-linux-gnu/libcrypto.so /usr/lib/x86_64-linux-gnu/libz.so /usr/lib/x86_64-linux-gnu/libcrypto.a /usr/lib/x86_64-linux-gnu/libssl.a && sudo mv /usr/lib/aarch64-linux-gnu/pkgconfig/libsodium.pc /usr/lib/pkgconfig/

      - name: Generate CMakeFiles
        run: mkdir build && cd build && cmake -DCMAKE_TOOLCHAIN_FILE=cmake/ARM64ToolChain.cmake -G Ninja ..

      - name: Compile Source
        run: cd build && sudo ninja

      - name: Package Distributable
        run: cd build && cpack

      - name: Upload Binaries
        uses: actions/upload-artifact@v2
        with:
          name: "libdpp - Debian Package AArch64"
          path: "${{github.workspace}}/build/*.deb"

